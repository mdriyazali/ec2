name: Create EC2 Instance

on:
  push:
    branches:
      - main

jobs:
  create-ec2-instance:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Change to your desired region

    - name: Create or Use Default VPC
      run: |
        # Check if default VPC exists
        DEFAULT_VPC_ID=$(aws ec2 describe-vpcs --query "Vpcs[?IsDefault==true].VpcId" --output text)
        
        if [ -z "$DEFAULT_VPC_ID" ]; then
          echo "Default VPC not found. Creating a new VPC..."
          
          # Create a new VPC
          VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text)
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support '{"Value":true}'
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames '{"Value":true}'
          
          # Create a new subnet
          SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --query 'Subnet.SubnetId' --output text)
          
          # Create a new security group
          SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name my-security-group --description "My security group" --vpc-id $VPC_ID --query 'GroupId' --output text)
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
        else
          echo "Using default VPC..."
          VPC_ID=$DEFAULT_VPC_ID
          
          # Fetch the default subnet ID
          SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[0].SubnetId" --output text)
          
          # Fetch the default security group ID
          SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[0].GroupId" --output text)
        fi

        # Check if key pair exists, create if not
        KEY_NAME=my-key-pair
        aws ec2 describe-key-pairs --key-names $KEY_NAME 2>/dev/null || \
        (aws ec2 create-key-pair --key-name $KEY_NAME --query 'KeyMaterial' --output text > my-key-pair.pem && chmod 400 my-key-pair.pem)
        
        # Fetch the latest Amazon Linux 2 AMI ID
        LATEST_AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
        
        if [ -z "$LATEST_AMI_ID" ]; then
          echo "Latest AMI ID not found"
          exit 1
        fi
        
        # Launch the EC2 instance
        INSTANCE_ID=$(aws ec2 run-instances --image-id $LATEST_AMI_ID --count 1 --instance-type t2.micro --key-name $KEY_NAME --security-group-ids $SECURITY_GROUP_ID --subnet-id $SUBNET_ID --query 'Instances[0].InstanceId' --output text)
        
        if [ -z "$INSTANCE_ID" ]; then
          echo "Failed to launch EC2 instance"
          exit 1
        fi
        
        echo "EC2 Instance ID: $INSTANCE_ID"
        # Tag the instance with the name "riyaz"
        aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=riyaz
        
    - name: Wait for EC2 Instance to be running
      run: |
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "EC2 Instance $INSTANCE_ID is running"

    - name: Describe EC2 Instance
      run: |
        aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].{ID:InstanceId,Type:InstanceType,State:State.Name,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,LaunchTime:LaunchTime}' --output table
