name: Create New EC2 Instance

on:
  push:
    branches:
      - main

jobs:
  create-ec2-instance:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Change to your desired region

    - name: Create New VPC
      id: create_vpc
      run: |
        VPC_ID=$(aws ec2 create-vpc --cidr-block 10.1.0.0/16 --query 'Vpc.VpcId' --output text)
        aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support '{"Value":true}'
        aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames '{"Value":true}'
        echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

    - name: Create New Subnet
      id: create_subnet
      run: |
        SUBNET_ID=$(aws ec2 create-subnet --vpc-id ${{ env.VPC_ID }} --cidr-block 10.1.1.0/24 --query 'Subnet.SubnetId' --output text)
        echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_ENV

    - name: Create New Security Group
      id: create_security_group
      run: |
        SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name my-security-group-new --description "My new security group" --vpc-id ${{ env.VPC_ID }} --query 'GroupId' --output text)
        aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
        aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
        echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV

    - name: Create New Key Pair
      id: create_key_pair
      run: |
        KEY_NAME=new-key-pair-riyaz
        aws ec2 create-key-pair --key-name $KEY_NAME --query 'KeyMaterial' --output text > new-key-pair-riyaz.pem
        chmod 400 new-key-pair-riyaz.pem
        echo "KEY_NAME=$KEY_NAME" >> $GITHUB_ENV

    - name: Launch EC2 Instance
      id: launch_instance
      run: |
        # Fetch the latest Amazon Linux 2 AMI ID
        LATEST_AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
        
        if [ -z "$LATEST_AMI_ID" ]; then
          echo "Latest AMI ID not found"
          exit 1
        fi
        
        # Launch the EC2 instance
        INSTANCE_ID=$(aws ec2 run-instances --image-id $LATEST_AMI_ID --count 1 --instance-type t2.micro --key-name ${{ env.KEY_NAME }} --security-group-ids ${{ env.SECURITY_GROUP_ID }} --subnet-id ${{ env.SUBNET_ID }} --query 'Instances[0].InstanceId' --output text)
        
        if [ -z "$INSTANCE_ID" ]; then
          echo "Failed to launch EC2 instance"
          exit 1
        fi
        
        echo "EC2 Instance ID: $INSTANCE_ID"
        # Tag the instance with the name "new-instance"
        aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=new-instance

    - name: Wait for EC2 Instance to be running
      run: |
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "EC2 Instance $INSTANCE_ID is running"

    - name: Describe EC2 Instance
      run: |
        aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].{ID:InstanceId,Type:InstanceType,State:State.Name,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,LaunchTime:LaunchTime,Name:Tags[?Key==`Name`].Value|[0]}' --output table
